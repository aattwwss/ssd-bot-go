package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"
)

type TokenReq struct {
	ClientId     string
	ClientSecret string
	Username     string
	Password     string
}

type TokenRes struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
	ExpiresIn   int    `json:"expires_in"`
	Scope       string `json:"scope"`
}

func getToken(tokenReq TokenReq) (*TokenRes, error) {

	client := &http.Client{}

	// Set the form data
	data := url.Values{}
	data.Set("grant_type", "password")
	data.Set("username", tokenReq.Username)
	data.Set("password", tokenReq.Password)

	// Create a new POST request
	req, err := http.NewRequest("POST", "https://www.reddit.com/api/v1/access_token", strings.NewReader(data.Encode()))
	if err != nil {
		fmt.Println("Error creating request:", err)
		return nil, err
	}

	// Set the content type header
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("Accept", "*/*")
	req.SetBasicAuth(tokenReq.ClientId, tokenReq.ClientSecret)

	// Send the request
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return nil, err
	}
	if resp.StatusCode != 200 {
		fmt.Println("Error request:", resp.Status)
		return nil, errors.New("Received non OK status code: " + resp.Status)
	}

	defer resp.Body.Close()

	// Parse the JSON response body into the AutoGenerated struct
	var tokenRes TokenRes
	err = json.NewDecoder(resp.Body).Decode(&tokenRes)
	if err != nil {
		fmt.Println("Error decoding response body:", err)
		return nil, err
	}

	return &tokenRes, err
}

func getMe(ctx context.Context) string {
}

func main() {
	ctx := context.Background()
	clientId := os.Getenv("CLIENT_ID")
	clientSecret := os.Getenv("CLIENT_SECRET")
	username := os.Getenv("BOT_USERNAME")
	password := os.Getenv("BOT_PASSWORD")
	tokenReq := TokenReq{
		Username:     username,
		Password:     password,
		ClientId:     clientId,
		ClientSecret: clientSecret,
	}
	now := time.Now()
	token, err := getToken(tokenReq)
	if err != nil {
		fmt.Println("Error retrieving token", err)
	}

	ctx = context.WithValue(ctx, "token", token.AccessToken)
	ctx = context.WithValue(ctx, "expireTime", now.Add(time.Duration(token.ExpiresIn)*time.Second).UnixMilli())
	// fmt.Println(ctx.Value("token").(string))
	// fmt.Println(ctx.Value("expireTime").(int64))
}
